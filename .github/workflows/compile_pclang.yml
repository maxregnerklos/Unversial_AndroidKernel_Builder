# Copyright (c) 2022-2023 SkyFaklist
#
# This is free software, licensed under the GPL License.
# See /LICENSE for more information.
#
# Description: Build UA Kernel using GitHub Actions

name: Build UA Kernel (Proton-Clang)

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'Kernel Repo URL'
        required: true
        default: ''
      repo_branch:
        description: 'Branch of Kernel repo'
        required: true
        default: 'master'
      repo2_url:
        description: 'Second Kernel Repo URL'
        required: true
        default: ''
      repo2_branch:
        description: 'Branch of Second Kernel repo'
        required: true
        default: 'master'
      device:
        description: 'Device code of Kernel'
        required: true
        default: ''
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      custom_script:
        description: 'Run custom script'
        required: false
        default: 'false'
      kernelsu:
        description: 'Compile KernelSU'
        required: false
        default: 'false'
      use_ccache:
        description: 'Use CCache'
        required: true
        default: 'true'

env:
  UPLOAD_BIN_DIR: true
  UPLOAD_RELEASE: true
  REPO_BRANCH: master
  COMPER_URL: https://github.com/kdrag0n/proton-clang.git
  ANYKERNEL_URL: https://github.com/osm0sis/AnyKernel3.git 
  TZ: Asia/Shanghai
  ARCH: arm64
  SUBARCH: arm64
  CCACHE_DIR: ~/.ccache
  BUILDER: /workdir/toolchain/bin/

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      # Step 1: Checkout code
      - name: Checkout
        uses: actions/checkout@v2

      # Step 2: Initialize environment
      - name: Initialize environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo apt-get update
          sudo apt-get install -y bc bison build-essential binutils-dev ca-certificates ccache cmake curl flex file g++-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libwxgtk3.0-gtk3-dev libc6-i386 libxml2 libxml2-utils lld lzop ninja-build pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev unzip openjdk-8-jdk language-pack-zh-hans texinfo python python3.7 vim u-boot-tools xz-utils zlib1g-dev
          sudo apt-get autoremove --purge -y
          sudo apt-get clean
          sudo timedatectl set-timezone "$TZ"
          mkdir -p /workdir

      # Step 3: Clone source code and setup
      - name: Clone source code
        working-directory: /workdir
        run: |
          git clone --depth=1 ${{ github.event.inputs.repo_url }} -b ${{ github.event.inputs.repo_branch }} kernel
          git clone --depth=1 ${{ github.event.inputs.repo2_url }} -b ${{ github.event.inputs.repo2_branch }} kernel2
          git clone --depth=1 $COMPER_URL toolchain
          git clone $ANYKERNEL_URL anykernel
          mv anykernel/anykernel.sh anykernel/compile.sh anykernel/custom.sh extra/
          rm -rf anykernel/.github anykernel/README.md anykernel/.git anykernel/anykernel.sh
          cp extra/compile.sh kernel/
          cp extra/custom.sh kernel/
          ln -sf /workdir/kernel $GITHUB_WORKSPACE/kernel

      # Step 4: Set up CCache
      - name: Set CCache
        if: ${{ github.event.inputs.use_ccache == 'true' }}
        run: ccache -M 15G

      # Step 5: Patch KernelSU
      - name: Patch KernelSU
        if: ${{ github.event.inputs.kernelsu == 'true' }}
        run: curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -

      # Step 6: Run custom script
      - name: Run Custom Script
        if: ${{ github.event.inputs.custom_script == 'true' }}
        run: |
          chmod +x ./kernel/custom.sh
          ./kernel/custom.sh

      # Step 7: Set Device
      - name: Set Device
        working-directory: /workdir/kernel
        run: make -i O=out ${{ github.event.inputs.device }}_defconfig

      # Step 8: Compile Source
      - name: Compile Source
        working-directory: /workdir/kernel
        run: |
          chmod +x compile.sh
          ./compile.sh
          ls out/arch/arm64/boot/

      # Step 9: Pack Kernel
      - name: Pack Kernel
        working-directory: /workdir
        run: |
          mkdir -p /workdir/release_up
          ln -sf /workdir/release_up $GITHUB_WORKSPACE/release_up
          cp /workdir/kernel/out/arch/arm64/boot/Image.gz-dtb ./anykernel/Image-dtb
          tar -zcvf /workdir/release_up/UALoader_${{ github.event.inputs.device }}_Fullpack.tar.gz /workdir/kernel/out/arch/arm64/boot/*
          zip -q -r /workdir/release_up/UA_Loader_${{ github.event.inputs.device }}_Anykernel.zip /workdir/anykernel/*

      # Step 10: Upload Kernel directory
      - name: Upload Kernel Directory
        uses: actions/upload-artifact@v2
        with:
          name: UALoader_${{ github.event.inputs.device }}_Fullpack
          path: /workdir/kernel/out/arch/arm64/boot/

      # Step 11: Upload Kernel Patcher
      - name: Upload Kernel Patcher
        uses: actions/upload-artifact@v2
        with:
          name: UA_Loader_${{ github.event.inputs.device }}_Anykernel
          path: /workdir/anykernel/

      # Step 12: Generate release tag
      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "UAB-$(date +'%Y.%m.%d-%H%M')" > release.txt
          echo "::set-output name=release_tag::$(cat release.txt)"
          echo "::set-output name=status::success"

      # Step 13: Upload Kernel to release
      - name: Upload Kernel to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: /workdir/release_up/*

      # Step 14: Delete workflow runs
      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3
